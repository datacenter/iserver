class K8sMachineConfigOutput():
    def __init__(self):
        pass

    def print_machine_configs(self, info, title=False):
        if title:
            self.my_output.default(
                'Machine Config (MC) - State [#%s]' % (len(info)),
                underline=True,
                before_newline=True
            )

        if len(info) == 0:
            self.my_output.default('None')
            return

        for item in info:
            item['labelT'] = []
            for key in item['label']:
                item['labelT'].append(
                    '%s:%s' % (
                        key.replace('machineconfiguration.openshift.io/', ''),
                        item['label'][key]
                    )
                )

            if item['owner'] is None:
                item['ownerT'] = ['--']
            else:
                item['ownerT'] = item['owner'].split('/')

        info = self.my_output.prepare_list(
            info,
            empty=['labelT']
        )

        order = [
            'name',
            'ownerT',
            'labelT',
            'generated_by',
            'ignition_version',
            'fileCount',
            'systemdCount',
            'usersCount',
            'age'
        ]

        headers = [
            'Name',
            'Owner',
            'Label',
            'Generated By',
            'Ignition',
            'File',
            'Systemd',
            'User',
            'Age'
        ]

        self.my_output.my_table(
            self.my_output.expand_lists(
                info,
                order,
                ['ownerT', 'labelT']
            ),
            order=order,
            headers=headers,
            row_separator=False,
            allow_order_subkeys=True,
            underline=True,
            table=True
        )

    def print_machine_configs_file(self, info, title=False):
        new_info = []
        for item in info:
            for file_info in item['file']:
                new_item = {}
                new_item['name'] = item['name']
                for key in file_info:
                    new_item[key] = file_info[key]

                new_info.append(
                    new_item
                )

        if title:
            self.my_output.default(
                'Machine Config (MC) - File [#%s]' % (len(new_info)),
                underline=True,
                before_newline=True
            )

        if len(new_info) == 0:
            self.my_output.default('None')
            return

        order = [
            'name',
            'path',
            'overwrite',
            'umode'
        ]

        headers = [
            'Name',
            'Path',
            'Overwrite',
            'Mode'
        ]

        self.my_output.my_table(
            new_info,
            order=order,
            headers=headers,
            row_separator=False,
            allow_order_subkeys=True,
            underline=True,
            table=True
        )

    def print_machine_configs_systemd(self, info, title=False):
        new_info = []
        for item in info:
            for systemd_info in item['systemd']:
                new_item = {}
                new_item['mcname'] = item['name']
                for key in systemd_info:
                    new_item[key] = systemd_info[key]

                new_info.append(
                    new_item
                )

        if title:
            self.my_output.default(
                'Machine Config (MC) - Systemd [#%s]' % (len(new_info)),
                underline=True,
                before_newline=True
            )

        if len(new_info) == 0:
            self.my_output.default('None')
            return

        order = [
            'mcname',
            'name',
            'enabled'
        ]

        headers = [
            'Name',
            'Systemd',
            'Enabled'
        ]

        self.my_output.my_table(
            new_info,
            order=order,
            headers=headers,
            row_separator=False,
            allow_order_subkeys=True,
            underline=True,
            table=True
        )

    def print_machine_configs_content_file(self, info, title=False):
        new_info = []
        for item in info:
            for file_info in item['file']:
                new_item = {}
                new_item['name'] = item['name']
                for key in file_info:
                    new_item[key] = file_info[key]

                new_info.append(
                    new_item
                )

        if title:
            self.my_output.default(
                'Machine Config (MC) - File Content [#%s]' % (len(new_info)),
                underline=True,
                before_newline=True
            )

        if len(new_info) == 0:
            self.my_output.default('None')
            return

        for item in new_info:
            order = [
                'name',
                'path',
                'overwrite',
                'umode'
            ]

            headers = [
                'Name',
                'Path',
                'Overwrite',
                'Mode'
            ]

            self.my_output.dictionary(
                item,
                title='Machine Config File',
                underline=True,
                prefix="- ",
                justify=True,
                keys=order,
                title_keys=headers
            )

            self.my_output.default(
                item['content']
            )

    def print_machine_configs_content_systemd(self, info, title=False):
        new_info = []
        for item in info:
            for file_info in item['systemd']:
                new_item = {}
                new_item['mc_name'] = item['name']
                for key in file_info:
                    new_item[key] = file_info[key]

                new_info.append(
                    new_item
                )

        if title:
            self.my_output.default(
                'Machine Config (MC) - Systemd Content [#%s]' % (len(new_info)),
                underline=True,
                before_newline=True
            )

        if len(new_info) == 0:
            self.my_output.default('None')
            return

        for item in new_info:
            order = [
                'mc_name',
                'name',
                'enabled'
            ]

            headers = [
                'Name',
                'Systemd',
                'Enabled'
            ]

            self.my_output.dictionary(
                item,
                title='Machine Config Systemd',
                underline=True,
                prefix="- ",
                justify=True,
                keys=order,
                title_keys=headers
            )

            self.my_output.default('')
            if item['content'] is not None:
                self.my_output.default(
                    item['content']
                )

            for dropin in item['dropin']:
                self.my_output.default('Name: %s' % (dropin['name']), underline=True)
                self.my_output.default(
                    dropin['contents']
                )

    def print_machine_configs_user(self, info, title=False):
        new_info = []
        for item in info:
            for user_info in item['users']:
                new_item = {}
                new_item['name'] = item['name']
                for key in user_info:
                    new_item[key] = user_info[key]

                new_info.append(
                    new_item
                )

        if title:
            self.my_output.default(
                'Machine Config (MC) - Users [#%s]' % (len(new_info)),
                underline=True,
                before_newline=True
            )

        if len(new_info) == 0:
            self.my_output.default('None')
            return

        order = [
            'name',
            'username',
            'keys'
        ]

        headers = [
            'Name',
            'Username',
            'Authorized Key'
        ]

        self.my_output.my_table(
            self.my_output.expand_lists(
                new_info,
                order,
                ['keys']
            ),
            order=order,
            headers=headers,
            row_separator=False,
            allow_order_subkeys=True,
            underline=True,
            table=True
        )
